<?php

/**
 * @file
 * Functions to support theming in the foomami theme.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;
use Drupal\search\SearchPageInterface;
use Drupal\views\Form\ViewsForm;

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Adds body classes if certain regions have content.
 */
function foomami_preprocess_html(&$variables) {
  $cssVars = [];
  $theme_colors = [
    'primary',
    'secondary',
    'accent',
  ];

  foreach ($theme_colors as $color_name) {
    $hex = theme_get_setting($color_name . '_color');

    if ($hex) {

      $hsl = _hexToHsl($hex);

      $cssVars[] = "--h-$color_name:$hsl[0]";
      $cssVars[] = "--s-$color_name:$hsl[1]";
      $cssVars[] = "--l-$color_name:$hsl[2]";
    }
  }

  $variables['html_attributes']->setAttribute('style', implode(';', $cssVars) . ';');

  // Add a sidebar class if the sidebar has content in it.
  if (!empty($variables['page']['sidebar'])) {
    $variables['attributes']['class'][] = 'two-columns';
    $variables['#attached']['library'][] = 'foomami/two-columns';
  }
  else {
    $variables['attributes']['class'][] = 'one-column';
  }
}

/**
 * Implements hook_preprocess_field().
 */
function foomami_preprocess_field(&$variables, $hook) {
  $element = $variables['element'];
  // Add class to label and items fields to be styled using the meta styles.
  if (isset($element['#field_name'])) {
    if (
      $element['#field_name'] == 'field_recipe_category' ||
      $element['#field_name'] == 'field_tags' ||
      $element['#field_name'] == 'field_difficulty') {
      $variables['attributes']['class'] = 'label-items';
    }
  }
}

/**
 * Implements hook_preprocess_block().
 */
function foomami_preprocess_block(&$variables) {
  $variables['title_attributes']['class'][] = 'block__title';
  // Add a class indicating the custom block bundle.
  if (isset($variables['elements']['content']['#block_content'])) {
    $variables['attributes']['class'][] = Html::getClass('block-type-' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for block templates.
 */
function foomami_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Block suggestions for custom block bundles.
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function foomami_theme_suggestions_search_result_alter(array &$suggestions, array $variables) {
  $node = $variables['result']['node'];

  $suggestions[] = 'search_result__type_' . $node->bundle();
  array_unshift($suggestions, 'search_result__id_' . $node->id());

  $now = intval((new DateTime())->format('U'));
  $created = intval($node->getCreatedTime());
  $two_weeks = 60 * 60 * 24 * 14;
  $age_suggestion = $now - $created < $two_weeks ?
    'search_result__age_new' :
    'search_result__age_old';

  $suggestions[] = $age_suggestion;

  if ($node->hasField('field_difficulty')) {
    $difficulty_field = $node->get('field_difficulty');

    if (!$difficulty_field->isEmpty()) {
      $difficulty = $difficulty_field->get(0)->getValue()['value'];

      $suggestions[] = 'search_result__difficulty_' . $difficulty;
    }
  }


}

/**
 * Implements hook_preprocess_breadcrumb().
 */
function foomami_preprocess_breadcrumb(&$variables) {
  // We are creating a variable for the Current Page Title, to allow us to print
  // it after the breadcrumbs loop has run.
  $route_match = \Drupal::routeMatch();
  // Search page titles aren't resolved using the title_resolver service - it
  // will always return 'Search' instead of 'Search for [term]', which would
  // give us a breadcrumb of Home >> Search >> Search.
  // @todo Revisit after https://www.drupal.org/project/drupal/issues/2359901
  // @todo Revisit after https://www.drupal.org/project/drupal/issues/2403359
  $entity = $route_match->getParameter('entity');
  if ($entity instanceof SearchPageInterface) {
    $variables['current_page_title'] = $entity->getPlugin()->suggestedTitle();
  }
  else {
    $variables['current_page_title'] = \Drupal::service('title_resolver')->getTitle(\Drupal::request(), $route_match->getRouteObject());
  }
  // Since we are printing the 'Current Page Title', add the URL cache context.
  // If we don't, then we might end up with something like
  // "Home > Articles" on the Recipes page, which should read "Home > Recipes".
  $variables['#cache']['contexts'][] = 'url';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function foomami_form_search_block_form_alter(&$form, FormStateInterface $form_state) {
  $form['keys']['#attributes']['placeholder'] = t('Search by keyword, ingredient, dish');
}

/**
 * Implements hook_preprocess_links__media_library_menu().
 *
 * This targets the menu of available media types in the media library's modal
 * dialog.
 *
 * @todo Do this in the relevant template once
 *   https://www.drupal.org/project/drupal/issues/3088856 is resolved.
 */
function foomami_preprocess_links__media_library_menu(array &$variables) {
  foreach ($variables['links'] as &$link) {
    // This conditional exists because the media-library-menu__link class is
    // currently added by Classy, but foomami will eventually not use Classy as a
    // base theme.
    // @todo remove conditional, keep class addition in
    //   https://drupal.org/node/3110137
    // @see https://www.drupal.org/node/3109287
    // @see classy_preprocess_links__media_library_menu()
    if (!isset($link['link']['#options']['attributes']['class']) || !in_array('media-library-menu__link', $link['link']['#options']['attributes']['class'])) {
      $link['link']['#options']['attributes']['class'][] = 'media-library-menu__link';
    }
  }
}

/**
 * Implements hook_form_alter().
 *
 * @todo revisit in https://drupal.org/node/3110132
 */
function foomami_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $form_object = $form_state->getFormObject();

  if ($form_object instanceof ViewsForm && strpos($form_object->getBaseFormId(), 'views_form_media_library') === 0) {
    // The conditional below exists because the media-library-views-form class
    // is currently added by Classy, but foomami will eventually not use Classy as
    // a base theme.
    // @todo remove conditional, keep class addition in
    //   https://drupal.org/node/3110137
    // @see https://www.drupal.org/node/3109287
    // @see classy_form_alter()
    if (!isset($form['#attributes']['class']) || !in_array('media-library-views-form', $form['#attributes']['class'])) {
      $form['#attributes']['class'][] = 'media-library-views-form';
    }
  }
}

/**
 * Implements hook_preprocess_image_widget().
 *
 * @todo Revisit in https://drupal.org/node/3117430
 */
function foomami_preprocess_image_widget(&$variables) {
  if (!empty($variables['element']['fids']['#value'])) {
    $file = reset($variables['element']['#files']);
    $variables['data']["file_{$file->id()}"]['filename']['#suffix'] = ' <span class="file-size">(' . format_size($file->getSize()) . ')</span> ';
  }
}

/**
 * Implements template_preprocess_links().
 *
 * This makes it so array keys of #links items are added as a class. This
 * functionality was removed in Drupal 8.1, but still necessary in some
 * instances.
 *
 * @todo remove in https://drupal.org/node/3120962
 */
function foomami_preprocess_links(&$variables) {
  if (!empty($variables['links'])) {
    foreach ($variables['links'] as $key => $value) {
      if (!is_numeric($key)) {
        $class = Html::getClass($key);
        $variables['links'][$key]['attributes']->addClass($class);
      }
    }
  }
}

/**
 * Converts hex color strings to array of HSL values.
 * Code based on JS version: https://css-tricks.com/converting-color-spaces-in-javascript/.
 * Formula here: https://www.rapidtables.com/convert/color/rgb-to-hsl.html.
 *
 * @param string $hexString
 *   The 6-character hexadecimal color code, optionally with a leading hash
 *
 * @return array
 *   Array containing hue, saturation, and lightness values.
 *   $hue: integer of value 0-360 indicating the hue on a color wheel.
 *   $saturation: string of saturation as a percentage (0% all gray, 100% full color).
 *   $lightness: string of lightness as a percentage (0% darkened to black, 50% full color, 100% lightened to white).
 */
function _hexToHsl($hexString) {
  // Convert hexcode pairs to rgb values (0-255).
  $hexVal = trim($hexString, '#');
  $r0 = hexdec($hexVal[0] . $hexVal[1]);
  $g0 = hexdec($hexVal[2] . $hexVal[3]);
  $b0 = hexdec($hexVal[4] . $hexVal[5]);

  // Convert rgb's 0-255 to decimal values.
  $r = bcdiv($r0, 255, 16);
  $g = bcdiv($g0, 255, 16);
  $b = bcdiv($b0, 255, 16);

  // Calculate Hue.
  $c_min = min($r, $g, $b);
  $c_max = max($r, $g, $b);
  $delta = $c_max - $c_min;

  if ($delta == 0) {
    $h = 0;
  }
  else {
    switch ($c_max) {
      case $r:
        $h = bcmod((($g - $b) / $delta), 6, 16);
        break;

      case $g:
        $h = (($b - $r) / $delta) + 2;
        break;

      case $b:
        $h = (($r - $g) / $delta) + 4;
        break;

      default:
        $h = 0;
        break;
    }
  }

  $h = round($h * 60);

  while ($h < 0) {
    $h += 360;
  }

  // Calculate Lightness.
  $l = ($c_max + $c_min) / 2;

  // Calculate Saturation.
  $s = $delta == 0 ? 0 : $delta / (1 - abs((2 * $l) - 1));

  // Convert Saturation and Lightness to percentages.
  $s = round($s * 100);
  $l = round($l * 100);

  return [$h, $s, $l];
}
